package com.kakao.mimi.sbt

import java.io.File
import java.nio.file.{Paths, Files}
import com.kakao.mimi.sbt.oozie.Validator
import org.eclipse.jgit.api.Git
import org.eclipse.jgit.console.ConsoleCredentialsProvider
import sbt._
import Keys._
import complete.DefaultParsers._

object SbtOozie extends AutoPlugin {
  object autoImport {
    val oozieLibrary = taskKey[Option[File]]("The oozie application libary. Any jar file generated by package or assembly task.")
    val oozieScripts = settingKey[Option[File]]("Additional workflow resource root(shell script, sql, ...)")
  }

  lazy val oozieValidate = taskKey[Unit]("Validate oozie workflow.xml. workflow.xml should be under the baseDirectory")
  lazy val ooziePackage = taskKey[File]("Package oozie workflow application path.")
  lazy val oozieNew = inputKey[Unit]("Create new oozie workflow project.")
  import autoImport._

  override def trigger: PluginTrigger = allRequirements

  override def globalSettings: Seq[Def.Setting[_]] = super.globalSettings ++ Seq(
    oozieScripts := None,
    oozieLibrary := None
  )

  override def projectSettings: Seq[Def.Setting[_]] = super.projectSettings ++ Seq(
    oozieValidate := {
      implicit val logger = streams.value.log
      val validator = new Validator()
      val workflow = baseDirectory.value / "workflow.xml"
      logger.info(s"Validating $workflow")
      if (!validator.validate(workflow.getPath)) toError(Some("Validation failed."))
    },
    ooziePackage := {
      val logger = streams.value.log
      val packageTarget = crossTarget.value / name.value
      logger.info(s"packaging workflow application to $packageTarget.")
      IO.createDirectory(packageTarget)

      oozieLibrary.value map { libJar =>
        IO.copyFile(libJar, packageTarget / "lib" / libJar.getName, preserveLastModified = true)
      }

      logger.info("packaging workflow.xml")
      IO.copyFile(baseDirectory.value / "workflow.xml", packageTarget / "workflow.xml", preserveLastModified = true)

      //copying scripts
      logger.info("packaging other resources")
      val scriptRoot = oozieScripts.value.getOrElse(baseDirectory.value / "scripts")
      IO.listFiles(scriptRoot).foreach { x =>
        if (x.isDirectory) IO.copyDirectory(x, packageTarget / x.getName)
        else IO.copyFile(x, packageTarget / x.getName)
      }
      logger.info("Packaing workflow application finished.")
      packageTarget
    },
    ooziePackage <<= ooziePackage.dependsOn(oozieValidate),
    oozieNew := {
      val args: Seq[String] = spaceDelimited("<arg>").parsed

      if(args.size != 1) {
        toError(Some(""" Usage) oozieNew "projectName" """))
      }

      val projectName = args(0)
      def replace(file: File) = {
        val path = Paths.get(file.getPath)
        val text = new String(Files.readAllBytes(path), "UTF-8")
        val replaced = text.replaceAll("oozie-skeleton", projectName)
        Files.write(path, replaced.getBytes("UTF-8"))
      }

      val skeletonRepo = "https://github.daumkakao.com/mimi/oozie-skeleton.git"
      val cloneTo = new File(".") / projectName
      val ccp = new ConsoleCredentialsProvider()
      Git.cloneRepository().setURI(skeletonRepo).setCredentialsProvider(ccp).setDirectory(cloneTo).call()

      replace(cloneTo / "build.sbt")
      replace(cloneTo / "workflow.xml")
      replace(cloneTo / "README.md")
      IO.delete(cloneTo / ".git")
    }
  )

}
